'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = createHttpClient;

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _rateLimit = require('./rate-limit');

var _rateLimit2 = _interopRequireDefault(_rateLimit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create pre configured axios instance
 * @private
 * @param {Object} axios - Axios library
 * @param {Object} httpClientParams - Initialization parameters for the HTTP client
 * @prop {string} space - Space ID
 * @prop {string} accessToken - Access Token
 * @prop {boolean=} insecure - If we should use http instead
 * @prop {string=} host - Alternate host
 * @prop {Object=} httpAgent - HTTP agent for node
 * @prop {Object=} httpsAgent - HTTPS agent for node
 * @prop {Object=} proxy - Axios proxy config
 * @prop {Object=} headers - Additional headers
 * @return {Object} Initialized axios instance
 */
function createHttpClient(axios, httpClientParams) {
  var space = httpClientParams.space,
      accessToken = httpClientParams.accessToken,
      insecure = httpClientParams.insecure,
      host = httpClientParams.host,
      defaultHostname = httpClientParams.defaultHostname,
      httpAgent = httpClientParams.httpAgent,
      httpsAgent = httpClientParams.httpsAgent,
      proxy = httpClientParams.proxy;
  var headers = httpClientParams.headers;

  var _ref = host && host.split(':') || [],
      _ref2 = _slicedToArray(_ref, 2),
      hostname = _ref2[0],
      port = _ref2[1];

  hostname = hostname || defaultHostname;
  port = port || (insecure ? 80 : 443);
  var baseURL = (insecure ? 'http' : 'https') + '://' + hostname + ':' + port + '/spaces/';
  if (space) {
    baseURL += space + '/';
  }
  headers = headers || {};
  headers['Authorization'] = 'Bearer ' + accessToken;

  // Set these headers only for node because browsers don't like it when you
  // override user-agent or accept-encoding.
  // The SDKs should set their own X-Contentful-User-Agent.
  if (process && process.release && process.release.name === 'node') {
    headers['user-agent'] = 'node.js/' + process.version;
    headers['Accept-Encoding'] = 'gzip';
  }

  var instance = axios.create({
    baseURL: baseURL,
    headers: headers,
    httpAgent: httpAgent,
    httpsAgent: httpsAgent,
    proxy: proxy,
    paramsSerializer: _qs2.default.stringify
  });
  instance.httpClientParams = httpClientParams;

  /**
   * Creates a new axios instance with the same default base parameters as the
   * current one, and with any overrides passed to the newParams object
   * This is useful as the SDKs use dependency injection to get the axios library
   * and the version of the library comes from different places depending
   * on whether it's a browser build or a node.js build.
   * @private
   * @param {Object} httpClientParams - Initialization parameters for the HTTP client
   * @return {Object} Initialized axios instance
   */
  instance.cloneWithNewParams = function (newParams) {
    return createHttpClient(axios, (0, _assign2.default)((0, _cloneDeep2.default)(httpClientParams), newParams));
  };
  (0, _rateLimit2.default)(instance);
  return instance;
}
module.exports = exports['default'];